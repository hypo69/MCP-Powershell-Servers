{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["-y", "@playwright/mcp@latest"],
      "description": "Автоматизация браузера через Playwright"
    },

    "powershell-stdio": {
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy", "Bypass",
        "-File",
        "C:/powershell/modules/mcp-powershell-server/src/servers/McpSTDIOServer.v2.ps1"
      ],
      "envFile": "C:/powershell/modules/mcp-powershell-server/.env",
      "description": "PowerShell STDIO сервер (рекомендуется v2 - версия 1.1.5)"
    },

    "powershell-stdio-legacy": {
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy", "Bypass",
        "-File",
        "C:/powershell/modules/mcp-powershell-server/src/servers/McpSTDIOServer.ps1"
      ],
      "envFile": "C:/powershell/modules/mcp-powershell-server/.env",
      "description": "PowerShell STDIO сервер (legacy версия 1.1.1)"
    },

    "powershell-https": {
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy", "Bypass",
        "-File",
        "C:/powershell/modules/mcp-powershell-server/src/servers/McpHttpsServer.ps1",
        "-Port", "8090",
        "-ServerHost", "localhost",
        "-ConfigFile", "../config/Config-McpHTTPS.json"
      ],
      "envFile": "C:/powershell/modules/mcp-powershell-server/.env",
      "description": "PowerShell HTTPS REST API сервер на порту 8090"
    },

    "wordpress-cli": {
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy", "Bypass",
        "-File",
        "C:/powershell/modules/mcp-powershell-server/src/servers/McpWPCLIServer.ps1",
        "-ConfigFile", "../config/Config-McpWPCLI.json"
      ],
      "envFile": "C:/powershell/modules/mcp-powershell-server/.env",
      "description": "WordPress CLI сервер для управления WP сайтами"
    },

    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "envFile": "C:/powershell/modules/mcp-powershell-server/.env",
      "description": "GitHub API интеграция"
    },

    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
      "description": "Последовательное мышление и планирование"
    },

    "huggingface": {
      "command": "python",
      "args": [
        "C:/powershell/modules/mcp-powershell-server/src/servers/huggingface_mcp.py"
      ],
      "env": {
        "HF_TOKEN": "${HF_TOKEN}"
      },
      "description": "HuggingFace Inference API для генерации текста"
    }
  },

  "disabledServers": {
    "_note": "Отключенные серверы - включите при необходимости перенеся в mcpServers",

    "powershell-huggingface-ps": {
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy", "Bypass",
        "-File",
        "C:/powershell/modules/mcp-powershell-server/src/servers/McpHuggingFaceServer.ps1",
        "-Port", "8080"
      ],
      "description": "PowerShell версия HuggingFace (deprecated, используйте Python версию)"
    }
  },

  "_configuration_guide": {
    "switching_versions": {
      "description": "Как переключаться между версиями серверов",
      "stdio_v1": "Измените 'powershell-stdio' args на McpSTDIOServer.ps1",
      "stdio_v2": "Измените 'powershell-stdio' args на McpSTDIOServer.v2.ps1 (рекомендуется)",
      "or_use_both": "Используйте оба: 'powershell-stdio' и 'powershell-stdio-legacy'"
    },
    
    "server_arguments": {
      "stdio": {
        "description": "STDIO сервер работает через стандартные потоки",
        "config_file": "../config/Config-McpSTDIO.json",
        "customization": [
          "Можно добавить: -Verbose для отладки",
          "Можно добавить: -ConfigFile 'path/to/custom/config.json'"
        ]
      },
      
      "https": {
        "description": "HTTPS сервер принимает HTTP запросы",
        "available_args": [
          "-Port <число> (по умолчанию 8090)",
          "-ServerHost <строка> (по умолчанию localhost)",
          "-ConfigFile <путь> (по умолчанию ../config/Config-McpHTTPS.json)"
        ],
        "example": [
          "-Port", "8091",
          "-ServerHost", "0.0.0.0",
          "-ConfigFile", "../config/Custom-HTTPS.json"
        ]
      },
      
      "wordpress": {
        "description": "WordPress CLI сервер для WP-CLI команд",
        "available_args": [
          "-ConfigFile <путь> (по умолчанию ../config/Config-McpWPCLI.json)"
        ],
        "example": [
          "-ConfigFile", "../config/Custom-WPCLI.json"
        ]
      }
    },

    "environment_variables": {
      "description": "Переменные окружения через .env файл",
      "required": [
        "HF_TOKEN - для HuggingFace сервера",
        "GITHUB_PERSONAL_ACCESS_TOKEN - для GitHub сервера"
      ],
      "optional": [
        "LOG_LEVEL - уровень логирования (DEBUG, INFO, WARNING, ERROR)",
        "MAX_EXECUTION_TIME - максимальное время выполнения в секундах"
      ]
    },

    "testing_servers": {
      "stdio_test": "echo '{\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"id\":1}' | pwsh -File McpSTDIOServer.ps1",
      "https_test": "Invoke-RestMethod -Uri 'http://localhost:8090/' -Method POST -Body '{\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"id\":1}'",
      "python_test": "python huggingface_mcp.py"
    },

    "log_files": {
      "stdio": "$env:TEMP\\mcp-stdio-server.log",
      "https": "$env:TEMP\\mcp-https-server.log",
      "wordpress": "$env:TEMP\\mcp-wpcli-server.log"
    }
  }
}
